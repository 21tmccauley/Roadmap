#include <iostream>

// Represents a single node in the linked list
struct Node {
    int data;
    Node* next;

    // Constructor to initialize a node
    Node(int val) : data(val), next(nullptr) {}
};

// Represents the complete linked list data structure
class LinkedList {
private:
    Node* head; // Pointer to the first node in the list

public:
    // Constructor
    LinkedList() : head(nullptr) {}

    // Destructor to free all nodes and prevent memory leaks
    ~LinkedList() {
        clear();
        std::cout << "LinkedList destroyed." << std::endl;
    }

    // Displays all elements in the list
    void display() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " -> ";
            current = current->next;
        }
        std::cout << "nullptr" << std::endl;
    }

    // Checks if the list is empty
    bool isEmpty() {
        return head == nullptr;
    }

    // Returns the number of nodes in the list
    int size() {
        int count = 0;
        Node* current = head;
        while (current != nullptr) {
            count++;
            current = current->next;
        }
        return count;
    }

    // Adds a new node to the end of the list
    void add(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    // Adds a new node to the beginning of the list
    void insertAtBeginning(int data) {
        Node* newNode = new Node(data);
        newNode->next = head;
        head = newNode;
    }
    
    // Inserts a node at a specific position (0-indexed)
    void insertAt(int data, int position) {
        if (position < 0) { // Invalid position
            return;
        }
        if (position == 0) { // Insert at the beginning
            insertAtBeginning(data);
            return;
        }
        
        Node* newNode = new Node(data);
        Node* current = head;
        int currentPosition = 0;

        // Traverse to the node *before* the target position
        while (current != nullptr && currentPosition < position - 1) {
            current = current->next;
            currentPosition++;
        }

        // If the position is valid (one past the end is allowed)
        if (current != nullptr) {
            newNode->next = current->next;
            current->next = newNode;
        }
    }

    // Removes the first node of the list
    void removeFromBeginning() {
        if (head != nullptr) {
            Node* nodeToDelete = head;
            head = head->next;
            delete nodeToDelete;
        }
    }
    
    // Removes the first node found with the matching data
    void remove(int data) {
        if (isEmpty()) {
            return;
        }
        
        // If the node to remove is the head
        if (head->data == data) {
            removeFromBeginning();
            return;
        }

        Node* current = head->next;
        Node* previous = head;

        while (current != nullptr) {
            if (current->data == data) {
                // Unlink the node
                previous->next = current->next;
                // Delete the unlinked node
                delete current;
                return;
            }
            previous = current;
            current = current->next;
        }
    }

    // Searches for a value in the list
    bool search(int data) {
        Node* current = head;
        while (current != nullptr) {
            if (current->data == data) {
                return true;
            }
            current = current->next;
        }
        return false;
    }

    // Removes all nodes from the list
    void clear() {
        while (!isEmpty()) {
            removeFromBeginning();
        }
    }
};

// Main function to demonstrate the LinkedList functionality
int main() {
    LinkedList list;

    std::cout << "Adding 10, 20, 30..." << std::endl;
    list.add(10);
    list.add(20);
    list.add(30);
    list.display(); // Expected: 10 -> 20 -> 30 -> nullptr

    std::cout << "\nInserting 5 at the beginning..." << std::endl;
    list.insertAtBeginning(5);
    list.display(); // Expected: 5 -> 10 -> 20 -> 30 -> nullptr

    std::cout << "\nInserting 15 at position 2..." << std::endl;
    list.insertAt(15, 2);
    list.display(); // Expected: 5 -> 10 -> 15 -> 20 -> 30 -> nullptr

    std::cout << "\nRemoving the first element..." << std::endl;
    list.removeFromBeginning();
    list.display(); // Expected: 10 -> 15 -> 20 -> 30 -> nullptr

    std::cout << "\nRemoving node with data 20..." << std::endl;
    list.remove(20);
    list.display(); // Expected: 10 -> 15 -> 30 -> nullptr
    
    std::cout << "\nSearching for 15: " << (list.search(15) ? "Found" : "Not Found") << std::endl;
    std::cout << "Searching for 99: " << (list.search(99) ? "Found" : "Not Found") << std::endl;

    std::cout << "\nList size: " << list.size() << std::endl;

    std::cout << "\nClearing the list..." << std::endl;
    list.clear();
    std::cout << "List is empty: " << (list.isEmpty() ? "Yes" : "No") << std::endl;
    list.display(); // Expected: nullptr

    return 0; // Destructor will be called here
}
